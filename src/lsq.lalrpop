use crate::lexer::LexicalError;
use crate::token::Token;
use crate::ast::{
    Query,
    Filter,
    Expr,
};

use crate::scheme::ast::{
    Value
};

grammar;

pub Query: Query = <sub_queries:Sep<"|", SubQuery>> => {
    let filters = sub_queries.into_iter().flatten().collect();
    Query::new(filters)
};

SubQuery: Vec<Box<Filter>> = {
    FilterUnit => vec![<>],
    <ChainableFilter+>,
};

ChainableFilter: Box<Filter> = {
    ";ident" => Box::new(Filter::Key(<>)),
    ";" "[" <"int"> "]" => Box::new(Filter::Index(<>)),
    ";" "[" <"int"?> ":" <"int"?> "]" => Box::new(Filter::Slice(<>)),
    ";" "[" <"ident"> => Box::new(Filter::Tail(<>)),
    <";ident"> "]" => Box::new(Filter::Head(<>)),
    ";()" => Box::new(Filter::ListIter),
    ";" "(" <Query> ")" => Box::new(Filter::SubQuery(Box::new(<>))),
};

FilterUnit: Box<Filter> = {
    ";" => Box::new(Filter::Identity),
    <func:"ident"> <args:Expr*> => Box::new(Filter::FuncCall{func, args}),
};

Expr: Box<Expr> = {
    ChainableFilter => Box::new(Expr::Filter(<>)),
    Value => Box::new(Expr::Value(<>)),
}


pub Scheme: Vec<Box<Value>> = <Value*>;

pub Value: Box<Value> = {
    "int" => Box::new(Value::Int(<>)),
    "float" => Box::new(Value::Float(<>)),
    "string" => Box::new(Value::String(<>)),
    "ident" => Box::new(Value::Symbol(<>)),
    "bool" => Box::new(Value::Bool(<>)),
    "char" => Box::new(Value::Char(<>)),
    "'" <Value> => Box::new(Value::Quote(<>)),
    "`" <Value> => Box::new(Value::Quasiquote(<>)),
    "," <Value> => Box::new(Value::Unquote(<>)),
    "#(" <Value*> ")" => Box::new(Value::Vector(<>)),
    "(" <Value*> ")" => Box::new(Value::List(<>)),
};



Sep<S, T>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

extern {
    type Location = usize;
    type Error = LexicalError;


    enum Token {
        "(" => Token::OpenParen,
        "#(" => Token::HashOpenParen,
        ")" => Token::CloseParen,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "ident" => Token::Ident(<String>),
        ";ident" => Token::KeyIdent(<String>),
        "int" => Token::Int(<i64>),
        "float" => Token::Float(<f64>),
        "string" => Token::String(<String>),
        "char" => Token::Char(<char>),
        ";" => Token::Identity,
        ";()" => Token::ListIter,
        "bool" => Token::Bool(<bool>),
        "|" => Token::Pipe,
        "," => Token::Comma,
        ":" => Token::Colon,
        "'" => Token::Quote,
        "`" => Token::Quasiquote,
    }
}

