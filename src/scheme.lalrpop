use crate::scheme_ast::{
    Value
};

grammar;

pub Scheme: Vec<Box<Value>> = <Value*>;

pub Value: Box<Value> = {
    r#"[-+]?[0-9]+"# => Box::new(Value::Int(<>.parse().unwrap())),
    r#"[-+]?[0-9]+\.[0-9]+"# => Box::new(Value::Float(<>.parse().unwrap())),
    r#""(\\"|[^"])*""# => Box::new(Value::String(<>.trim_matches('"').to_string())),
    r#"[a-zA-Z_!\$%\*\/:<=>\?@^~][a-zA-Z0-9_!\$%\*\+\-\.\/:<=>\?@^~]*"# 
        => Box::new(Value::Symbol(<>.to_string())),
    "#t" => Box::new(Value::Bool(true)),
    "#f" => Box::new(Value::Bool(false)),
    <long_char:r"#\\(.|newline|space|tab)"> => {
        match long_char {
            "newline" => Box::new(Value::Char('\n')),
            "space" => Box::new(Value::Char(' ')),
            "tab" => Box::new(Value::Char('\t')),
            _ => Box::new(Value::Char(long_char.chars().next().unwrap()))
        }
    },
    "'" <Value> => Box::new(Value::Quote(<>)),
    "`" <Value> => Box::new(Value::Quasiquote(<>)),
    "," <Value> => Box::new(Value::Unquote(<>)),
    "#(" <Value*> ")" => Box::new(Value::Vector(<>)),
    "(" <Value*> ")" => Box::new(Value::List(<>)),
};
